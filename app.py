import streamlit as st
import numpy as np
import cv2
from PIL import Image
import io
from predict import load_model, predict
from config import COLOR_ENCODING


# –ö–µ—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
@st.cache_resource
def get_model():
    return load_model()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–∫",
    layout="wide"
)

st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Ö")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = get_model()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è..."):
        mask = predict(image, model)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        st.image(mask, use_column_width=True)

        # –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—â–∞–¥–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–æ—â–∞–¥–µ–π")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        class_areas = {}
        total_pixels = mask.shape[0] * mask.shape[1]

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        for class_name, color in COLOR_ENCODING.items():
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
            class_mask = np.all(mask == np.array(color), axis=-1)
            area_pixels = np.sum(class_mask)
            area_percent = (area_pixels / total_pixels) * 100

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            class_areas[class_name] = {
                'pixels': area_pixels,
                'percent': area_percent,
                'color': color
            }

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        st.write("### –ü–ª–æ—â–∞–¥–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
        for class_name, data in class_areas.items():
            if class_name != 'unlabeled':  # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
                col1, col2, col3 = st.columns([1, 2, 3])
                with col1:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–≤–µ—Ç –∫–ª–∞—Å—Å–∞
                    st.markdown(
                        f"<div style='width:20px; height:20px; background-color:rgb{data['color']};'></div>",
                        unsafe_allow_html=True
                    )
                with col2:
                    st.write(f"**{class_name.replace('-', ' ').title()}**")
                with col3:
                    st.progress(data['percent'] / 100)
                    st.write(f"{data['pixels']:,} px ({data['percent']:.2f}%)")

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–¥–∞–Ω–∏–π
        st.write("### –°–≤–æ–¥–∫–∞ –ø–æ –∑–¥–∞–Ω–∏—è–º:")
        building_classes = [k for k in class_areas.keys() if 'building' in k]
        total_building_area = sum(class_areas[c]['pixels'] for c in building_classes)

        if total_building_area > 0:
            for class_name in building_classes:
                percent_of_buildings = (class_areas[class_name]['pixels'] / total_building_area) * 100
                st.write(
                    f"- {class_name.replace('-', ' ').title()}: "
                    f"{class_areas[class_name]['pixels']:,} px "
                    f"({percent_of_buildings:.1f}% –æ—Ç –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π)"
                )

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    img_bytes = cv2.imencode('.png', cv2.cvtColor(mask, cv2.COLOR_RGB2BGR))[1].tobytes()
    st.download_button(
        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏",
        data=img_bytes,
        file_name="damage_segmentation.png",
        mime="image/png"
    )